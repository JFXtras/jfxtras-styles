plugins {
    id 'signing'
    id "java-library"
    id "maven-publish"
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

sourceCompatibility = JavaVersion.VERSION_11

version = '11.6.15'
def versionDescription = 'JMetro'

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls' ]
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {
    implementation 'org.controlsfx:controlsfx:11.0.0'
}

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes( 'Implementation-Title':     project.name,
                    'Implementation-Version':   project.version)
    }
}

task javadocJar(type: Jar) {
    getArchiveClassifier().set('javadoc')
    from javadoc
}

javadoc {
    options.addStringOption('javafx', '-quiet')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

/* Publishing */
/* - for publishing to maven central need to define MAVEN_USERNAME and MAVEN_PASSWORD as environment variables */
publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)

            from components.java

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url version.toString().endsWith("SNAPSHOT")? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description "A theme / look and feel for JavaFX inspired (but not a copy) by Microsoft's Fluent Design"
            name project.name
            url 'https://pixelduke.com/java-javafx-theme-jmetro/'
            issueManagement {
                system 'GitHub'
                url 'https://github.com/JFXtras/jfxtras-styles/issues'
            }
            licenses {
                license {
                    name 'BSD New'
                    url 'https://opensource.org/licenses/BSD-3-Clause'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/JFXtras/jfxtras-styles.git'
            }
            developers {
                developer {
                    name 'Pedro Duque Vieira'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}




